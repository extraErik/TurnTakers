import { Component, OnInit, Input } from '@angular/core';
import { FormGroup, FormBuilder, Validators, FormArray, FormControl } from '@angular/forms';
import { Participant } from '../../takers/participant.model';
import { MyTurnTakersService } from 'src/app/services/my-turn-takers.service';
import { Router } from '@angular/router';
import { ParticipantsService } from 'src/app/services/participants.service';
import { TurnTaker } from '../../takers/turnTaker.model';
import { NavController } from '@ionic/angular';

@Component({
  selector: 'app-create-edit-turn-taker',
  templateUrl: './create-edit-turn-taker.component.html',
  styleUrls: ['./create-edit-turn-taker.component.scss'],
})
export class CreateEditTurnTakerComponent implements OnInit {

  form: FormGroup;
  availableParticipants: Array<Participant>;
  selectedParticipantList: Array<string> = [];
  participantListForDisplay = '';

  @Input() editTaker?: TurnTaker;
  takerName = '';
  takerDescription = '';

  constructor(
    private formBuilder: FormBuilder,
    private myTurnTakers: MyTurnTakersService,
    private navCtrl: NavController,
    private router: Router,
    private participantsService: ParticipantsService
  ) {

    this.availableParticipants = this.participantsService.getAllParticipants();

  }

  ngOnInit() {

    // If edit mode, prepopulate inputs
    if (this.editTaker) {
      this.takerName = this.editTaker.name;
      this.takerDescription = this.editTaker.description;

      this.selectedParticipantList = this.editTaker.participants.map(participantId => {
        return this.availableParticipants.find(availPart => {
          return availPart.id === participantId;
        }).name;
      });
      this.participantListForDisplay = this.selectedParticipantList.join(' \u2192 '); // joined by right arrow

      // Prepopulate the participant checkboxes
      // TODO: check for existence of any of these values first?
      // for (let i = 0, len = this.editTaker.participants.length; i < len; i++) {
      //   const availIndex = this.availableParticipants.findIndex(availPart => {
      //     return this.editTaker.participants[i]  === availPart.id;
      //   });
      //   this.form.controls.participants.value[availIndex] = true;
      // }

    }

    this.form = this.formBuilder.group({
      name: [this.takerName, Validators.required],
      description: this.takerDescription,
      participants: new FormArray([]),
      // turnsTakern: []

      // TODO: if edit mode, do we populate turns taken here? Or do something else for editing turns?

    });
    this.addCheckboxes(this.editTaker);
  }

  private addCheckboxes(takerBeingEdited?: TurnTaker) {
    let checkboxVal = null;
    this.availableParticipants.forEach((o, i) => {

      // If editing existing turntaker, then for each available participant, see if its ID matches
      // one of those in the turntaker particpant list; if so, pre-select the checkbox in the form.
      checkboxVal = null;
      let pIndex = -1;
      if (takerBeingEdited) {
        pIndex = takerBeingEdited.participants.findIndex(pId => {
          return pId === o.id;
        });
        if (pIndex > -1) {
          checkboxVal = true;
        }
      }

      const control = new FormControl(checkboxVal);
      (this.form.controls.participants as FormArray).push(control);
    });
  }

  participantClicked(event: any, availableParticipantIndex: any) {
    const availableParticipantName = this.availableParticipants[availableParticipantIndex].name;
    if (this.form.controls.participants.value[availableParticipantIndex] !== true) {
      // TODO: in line above: !== true meaning it's about to change to true...is there a better way here?
      this.selectedParticipantList.push(availableParticipantName);
    } else {
      if (this.selectedParticipantList) {
        this.selectedParticipantList = this.selectedParticipantList.filter(item => {
          return item !== availableParticipantName;
        });
      }
    }
    this.participantListForDisplay = this.selectedParticipantList.join(' \u2192 '); // joined by right arrow
  }

  onSubmit() {

    const newTurnTaker = new TurnTaker(

      // TODO: id will be created much differently in future - generated by Firebase?
      this.editTaker ? this.editTaker.id : Math.floor(Math.random() * 9999).toString(),

      this.form.value.name,
      this.form.value.description,

      // selectedParticipantIds,
      this.selectedParticipantList.map(
        (selectedName, index) => {
          return this.availableParticipants.find(
            item => {
              return item.name === selectedName;
          }).id;
        }
      ),

      this.editTaker ? this.editTaker.turnsTaken : []
    );

    if (this.editTaker) {
      this.myTurnTakers.updateTurnTaker(newTurnTaker);
      this.navCtrl.navigateBack(['/takers', 'detail', this.editTaker.id]);
    } else {
      this.myTurnTakers.addTurnTaker(newTurnTaker);
      this.navCtrl.navigateBack(['/takers']);
    }

    //this.router.navigate(['/takers']);
  }

}
